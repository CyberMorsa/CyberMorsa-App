"use client"

import type React from "react"

import { useState } from "react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { AlertTriangle, CheckCircle, Loader2 } from "lucide-react"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"

export function VulnerabilityChecker() {
  const [checking, setChecking] = useState(false)
  const [input, setInput] = useState("")
  const [activeTab, setActiveTab] = useState("cve")
  const [results, setResults] = useState<any>(null)

  async function checkVulnerability(e: React.FormEvent) {
    e.preventDefault()
    if (!input) return

    setChecking(true)
    setResults(null)

    // Simulación de verificación
    setTimeout(() => {
      if (activeTab === "cve") {
        setResults({
          found: Math.random() > 0.5,
          details: {
            id: input.toUpperCase(),
            severity: Math.random() > 0.5 ? "Alta" : "Media",
            description: "Descripción de la vulnerabilidad encontrada",
            affectedSystems: ["Windows 10", "Ubuntu 20.04", "CentOS 8"],
            mitigations: ["Actualizar a la última versión", "Aplicar parche de seguridad"],
          },
        })
      } else if (activeTab === "software") {
        setResults({
          vulnerabilities: Math.floor(Math.random() * 5),
          details: Array.from({ length: Math.floor(Math.random() * 5) }).map((_, i) => ({
            id: `CVE-2023-${1000 + i}`,
            severity: Math.random() > 0.5 ? "Alta" : "Media",
            description: `Vulnerabilidad en ${input} que permite acceso no autorizado`,
          })),
        })
      }

      setChecking(false)
    }, 1500)
  }

  return (
    <div className="space-y-4">
      <Tabs defaultValue="cve" onValueChange={setActiveTab}>
        <TabsList className="grid grid-cols-2 bg-gray-700">
          <TabsTrigger value="cve" className="data-[state=active]:bg-gray-600">
            CVE
          </TabsTrigger>
          <TabsTrigger value="software" className="data-[state=active]:bg-gray-600">
            Software
          </TabsTrigger>
        </TabsList>

        <TabsContent value="cve" className="mt-4">
          <form onSubmit={checkVulnerability} className="space-y-4">
            <div className="space-y-2">
              <label htmlFor="cve-input" className="text-sm text-gray-300">
                Identificador CVE
              </label>
              <div className="flex gap-2">
                <Input
                  id="cve-input"
                  type="text"
                  placeholder="Ej: CVE-2023-1234"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  className="bg-gray-700 border-gray-600 text-white"
                  disabled={checking}
                />
                <Button type="submit" disabled={checking || !input}>
                  {checking ? <Loader2 className="h-4 w-4 animate-spin" /> : "Verificar"}
                </Button>
              </div>
            </div>
          </form>
        </TabsContent>

        <TabsContent value="software" className="mt-4">
          <form onSubmit={checkVulnerability} className="space-y-4">
            <div className="space-y-2">
              <label htmlFor="software-input" className="text-sm text-gray-300">
                Nombre del Software
              </label>
              <div className="flex gap-2">
                <Input
                  id="software-input"
                  type="text"
                  placeholder="Ej: Apache 2.4.49"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  className="bg-gray-700 border-gray-600 text-white"
                  disabled={checking}
                />
                <Button type="submit" disabled={checking || !input}>
                  {checking ? <Loader2 className="h-4 w-4 animate-spin" /> : "Verificar"}
                </Button>
              </div>
            </div>
          </form>
        </TabsContent>
      </Tabs>

      {results && activeTab === "cve" && (
        <div className="mt-4 p-4 bg-gray-700 rounded-lg">
          {results.found ? (
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <AlertTriangle className="h-5 w-5 text-red-500" />
                <h3 className="text-lg font-medium text-white">Vulnerabilidad encontrada</h3>
              </div>

              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm text-gray-300">ID:</span>
                  <span className="text-sm font-medium text-white">{results.details.id}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-gray-300">Severidad:</span>
                  <span
                    className={`text-sm font-medium ${results.details.severity === "Alta" ? "text-red-400" : "text-yellow-400"}`}
                  >
                    {results.details.severity}
                  </span>
                </div>
                <div className="space-y-1">
                  <span className="text-sm text-gray-300">Descripción:</span>
                  <p className="text-sm text-white">{results.details.description}</p>
                </div>
                <div className="space-y-1">
                  <span className="text-sm text-gray-300">Sistemas afectados:</span>
                  <ul className="text-sm text-white space-y-1">
                    {results.details.affectedSystems.map((system: string, i: number) => (
                      <li key={i}>• {system}</li>
                    ))}
                  </ul>
                </div>
                <div className="space-y-1">
                  <span className="text-sm text-gray-300">Mitigaciones:</span>
                  <ul className="text-sm text-white space-y-1">
                    {results.details.mitigations.map((mitigation: string, i: number) => (
                      <li key={i}>• {mitigation}</li>
                    ))}
                  </ul>
                </div>
              </div>
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5 text-green-500" />
              <p className="text-white">No se encontró información sobre esta vulnerabilidad.</p>
            </div>
          )}
        </div>
      )}

      {results && activeTab === "software" && (
        <div className="mt-4 p-4 bg-gray-700 rounded-lg">
          <h3 className="text-lg font-medium text-white mb-3">Resultados para {input}</h3>

          {results.vulnerabilities > 0 ? (
            <div className="space-y-4">
              <p className="text-sm text-white">
                Se encontraron <span className="font-medium text-red-400">{results.vulnerabilities}</span>{" "}
                vulnerabilidades.
              </p>

              <div className="space-y-3">
                {results.details.map((vuln: any, i: number) => (
                  <div key={i} className="p-3 bg-gray-800 rounded-md">
                    <div className="flex justify-between items-center mb-2">
                      <span className="font-medium text-white">{vuln.id}</span>
                      <span
                        className={`text-xs px-2 py-0.5 rounded-full ${vuln.severity === "Alta" ? "bg-red-500/20 text-red-400" : "bg-yellow-500/20 text-yellow-400"}`}
                      >
                        {vuln.severity}
                      </span>
                    </div>
                    <p className="text-sm text-gray-300">{vuln.description}</p>
                  </div>
                ))}
              </div>
            </div>
          ) : (
            <div className="flex items-center gap-2">
              <CheckCircle className="h-5 w-5 text-green-500" />
              <p className="text-white">No se encontraron vulnerabilidades para este software.</p>
            </div>
          )}
        </div>
      )}
    </div>
  )
}
